// <auto-generated />
using System;
using Epra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Epra.Data.Migrations
{
    [DbContext(typeof(EpraContext))]
    [Migration("20200522134145_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Epra.Data.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasColumnType("text");

                    b.Property<int>("CompanyId")
                        .HasColumnName("company_id")
                        .HasColumnType("integer");

                    b.Property<int>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsMain")
                        .HasColumnName("is_main")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNav")
                        .HasColumnName("is_nav")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWebsite")
                        .HasColumnName("is_website")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnName("street")
                        .HasColumnType("text");

                    b.Property<string>("VatNumber")
                        .HasColumnName("vat_number")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Zip")
                        .HasColumnName("zip")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("Epra.Data.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("CompanyTypeId")
                        .HasColumnName("company_type_id")
                        .HasColumnType("integer");

                    b.Property<string>("Info")
                        .HasColumnName("info")
                        .HasColumnType("text");

                    b.Property<bool>("IsMainMember")
                        .HasColumnName("is_main_member")
                        .HasColumnType("boolean");

                    b.Property<int>("MarketActivityId")
                        .HasColumnName("market_activity_id")
                        .HasColumnType("integer");

                    b.Property<string>("MarketSecondSpecialty")
                        .HasColumnName("market_second_specialty")
                        .HasColumnType("text");

                    b.Property<bool>("MemberIndex")
                        .HasColumnName("member_index")
                        .HasColumnType("boolean");

                    b.Property<int?>("MembershipId")
                        .HasColumnName("membership_id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("SearchName")
                        .HasColumnName("search_name")
                        .HasColumnType("text");

                    b.Property<string>("UniqueStockCode")
                        .HasColumnName("unique_stock_code")
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnName("website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyTypeId");

                    b.HasIndex("MarketActivityId");

                    b.HasIndex("MembershipId");

                    b.ToTable("companies");
                });

            modelBuilder.Entity("Epra.Data.CompanyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("company_types");
                });

            modelBuilder.Entity("Epra.Data.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnName("address_id")
                        .HasColumnType("integer");

                    b.Property<int?>("AssistantId")
                        .HasColumnName("assistant_id")
                        .HasColumnType("integer");

                    b.Property<int>("CompanyId")
                        .HasColumnName("company_id")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasColumnType("text");

                    b.Property<string>("InformalName")
                        .HasColumnName("informal_name")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnName("location_of_contact")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnName("middle_name")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasColumnType("text");

                    b.Property<string>("PhoneDirect")
                        .HasColumnName("phone_direct")
                        .HasColumnType("text");

                    b.Property<string>("PhoneMobile")
                        .HasColumnName("phone_mobile")
                        .HasColumnType("text");

                    b.Property<string>("Prefix")
                        .HasColumnName("prefix")
                        .HasColumnType("text");

                    b.Property<string>("Suffix")
                        .HasColumnName("suffix")
                        .HasColumnType("text");

                    b.Property<string>("TitleExternal")
                        .HasColumnName("title_external")
                        .HasColumnType("text");

                    b.Property<int>("TitleInternalId")
                        .HasColumnName("title_internal_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AssistantId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("TitleInternalId");

                    b.ToTable("contacts");
                });

            modelBuilder.Entity("Epra.Data.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Region")
                        .HasColumnName("region")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("counties");
                });

            modelBuilder.Entity("Epra.Data.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("AddressId")
                        .HasColumnName("address_id")
                        .HasColumnType("integer");

                    b.Property<bool>("Booked")
                        .HasColumnName("booked")
                        .HasColumnType("boolean");

                    b.Property<string>("BottomNotes")
                        .HasColumnName("bottom_notes")
                        .HasColumnType("text");

                    b.Property<int>("CompanyId")
                        .HasColumnName("company_id")
                        .HasColumnType("integer");

                    b.Property<int>("ContactId")
                        .HasColumnName("contact_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateMailSent")
                        .HasColumnName("date_mail_sent")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DatePaid")
                        .HasColumnName("date_paid")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("DiscountPercent")
                        .HasColumnName("discount_percent")
                        .HasColumnType("numeric");

                    b.Property<string>("EmailExtra")
                        .HasColumnName("email_extra")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnName("invoice_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnName("invoice_number")
                        .HasColumnType("text");

                    b.Property<int>("InvoiceStatusId")
                        .HasColumnName("invoice_status_id")
                        .HasColumnType("integer");

                    b.Property<int>("InvoiceType")
                        .HasColumnName("invoice_type")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCredited")
                        .HasColumnName("is_credited")
                        .HasColumnType("boolean");

                    b.Property<int?>("MemberShipId")
                        .HasColumnName("membership_id")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentVia")
                        .HasColumnName("payment_via")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ProductCodeId")
                        .HasColumnName("product_code_id")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasColumnName("remarks")
                        .HasColumnType("text");

                    b.Property<decimal>("Total")
                        .HasColumnName("total")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Vat")
                        .HasColumnName("vat")
                        .HasColumnType("numeric");

                    b.Property<string>("VatComment")
                        .HasColumnName("vat_comment")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique();

                    b.HasIndex("InvoiceStatusId");

                    b.HasIndex("MemberShipId");

                    b.HasIndex("ProductCodeId");

                    b.HasIndex("ProductId");

                    b.ToTable("invoices");
                });

            modelBuilder.Entity("Epra.Data.InvoiceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("invoice_statuses");
                });

            modelBuilder.Entity("Epra.Data.MarketActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("market_activities");
                });

            modelBuilder.Entity("Epra.Data.Membership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<decimal?>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsBadDebtor")
                        .HasColumnName("is_bad_debtor")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RenewableDate")
                        .HasColumnName("renewable_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Total")
                        .HasColumnName("total")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("memberships");
                });

            modelBuilder.Entity("Epra.Data.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("BottomNotes")
                        .HasColumnName("bottom_notes")
                        .HasColumnType("text");

                    b.Property<byte[]>("EmailBanner")
                        .HasColumnName("email_banner")
                        .HasColumnType("bytea");

                    b.Property<string>("EmailBody")
                        .HasColumnName("email_body")
                        .HasColumnType("text");

                    b.Property<string>("EmailSubject")
                        .HasColumnName("email_subject")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductCodeId")
                        .HasColumnName("product_code_id")
                        .HasColumnType("integer");

                    b.Property<string>("SecondProductCode")
                        .HasColumnName("second_product_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<decimal?>("Vat")
                        .HasColumnName("vat")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ProductCodeId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("Epra.Data.ProductCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("product_codes");
                });

            modelBuilder.Entity("Epra.Data.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Epra.Data.TitleInternal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("titles_internal");
                });

            modelBuilder.Entity("Epra.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("Epra.Data.UserRoles", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("Epra.Data.Address", b =>
                {
                    b.HasOne("Epra.Data.Company", "Company")
                        .WithMany("Addresses")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Epra.Data.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Epra.Data.Company", b =>
                {
                    b.HasOne("Epra.Data.CompanyType", "CompanyType")
                        .WithMany("Companies")
                        .HasForeignKey("CompanyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Epra.Data.MarketActivity", "MarketActivity")
                        .WithMany("Companies")
                        .HasForeignKey("MarketActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Epra.Data.Membership", "Membership")
                        .WithMany("Companies")
                        .HasForeignKey("MembershipId");
                });

            modelBuilder.Entity("Epra.Data.Contact", b =>
                {
                    b.HasOne("Epra.Data.Address", "Address")
                        .WithMany("Contacts")
                        .HasForeignKey("AddressId");

                    b.HasOne("Epra.Data.Contact", "Assistant")
                        .WithMany("Bosses")
                        .HasForeignKey("AssistantId");

                    b.HasOne("Epra.Data.Company", "Company")
                        .WithMany("Contacts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Epra.Data.TitleInternal", "TitleInternal")
                        .WithMany("Contacts")
                        .HasForeignKey("TitleInternalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Epra.Data.Invoice", b =>
                {
                    b.HasOne("Epra.Data.Address", "Address")
                        .WithMany("Invoices")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Epra.Data.Company", "Company")
                        .WithMany("Invoices")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Epra.Data.Contact", "Contact")
                        .WithMany("Invoices")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Epra.Data.InvoiceStatus", "InvoiceStatus")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoiceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Epra.Data.Membership", "Membership")
                        .WithMany("Invoices")
                        .HasForeignKey("MemberShipId");

                    b.HasOne("Epra.Data.ProductCode", "ProductCode")
                        .WithMany("Invoices")
                        .HasForeignKey("ProductCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Epra.Data.Product", "Product")
                        .WithMany("Invoices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Epra.Data.Membership", b =>
                {
                    b.HasOne("Epra.Data.Product", "Product")
                        .WithMany("Memberships")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Epra.Data.Product", b =>
                {
                    b.HasOne("Epra.Data.ProductCode", "ProductCode")
                        .WithMany("Products")
                        .HasForeignKey("ProductCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Epra.Data.UserRoles", b =>
                {
                    b.HasOne("Epra.Data.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Epra.Data.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
